'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _define_property$3(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var FederationModuleManifest = 'federation-manifest.json';
var MANIFEST_EXT = '.json';
var BROWSER_LOG_KEY = 'FEDERATION_DEBUG';
var BROWSER_LOG_VALUE = '1';
var NameTransformSymbol = {
    AT: '@',
    HYPHEN: '-',
    SLASH: '/'
};
var _obj;
var NameTransformMap = (_obj = {}, _define_property$3(_obj, NameTransformSymbol.AT, 'scope_'), _define_property$3(_obj, NameTransformSymbol.HYPHEN, '_'), _define_property$3(_obj, NameTransformSymbol.SLASH, '__'), _obj);
var _obj1;
var EncodedNameTransformMap = (_obj1 = {}, _define_property$3(_obj1, NameTransformMap[NameTransformSymbol.AT], NameTransformSymbol.AT), _define_property$3(_obj1, NameTransformMap[NameTransformSymbol.HYPHEN], NameTransformSymbol.HYPHEN), _define_property$3(_obj1, NameTransformMap[NameTransformSymbol.SLASH], NameTransformSymbol.SLASH), _obj1);
var SEPARATOR = ':';
var ManifestFileName = 'mf-manifest.json';
var StatsFileName = 'mf-stats.json';
var MFModuleType = {
    NPM: 'npm',
    APP: 'app'
};
var MODULE_DEVTOOL_IDENTIFIER = '__MF_DEVTOOLS_MODULE_INFO__';

var ContainerPlugin = /*#__PURE__*/Object.freeze({
  __proto__: null
});

var ContainerReferencePlugin = /*#__PURE__*/Object.freeze({
  __proto__: null
});

var ModuleFederationPlugin = /*#__PURE__*/Object.freeze({
  __proto__: null
});

var SharePlugin = /*#__PURE__*/Object.freeze({
  __proto__: null
});

function isBrowserEnv() {
    return typeof window !== 'undefined';
}
function isDebugMode() {
    if (typeof process !== 'undefined' && process.env && process.env['FEDERATION_DEBUG']) {
        return Boolean(process.env['FEDERATION_DEBUG']);
    }
    return typeof FEDERATION_DEBUG !== 'undefined' && Boolean(FEDERATION_DEBUG);
}
var getProcessEnv = function getProcessEnv() {
    return typeof process !== 'undefined' && process.env ? process.env : {};
};

function _array_like_to_array$2(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array$2(arr);
}
function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property$2(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _iterable_to_array$1(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array$1(arr) || _unsupported_iterable_to_array$2(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array$2(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array$2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array$2(o, minLen);
}
function safeToString(info) {
    try {
        return JSON.stringify(info, null, 2);
    } catch (e) {
        return '';
    }
}
var DEBUG_LOG = '[ FEDERATION DEBUG ]';
function safeGetLocalStorageItem() {
    try {
        if (typeof window !== 'undefined' && window.localStorage) {
            return localStorage.getItem(BROWSER_LOG_KEY) === BROWSER_LOG_VALUE;
        }
    } catch (error) {
        return typeof document !== 'undefined';
    }
    return false;
}
var Logger = /*#__PURE__*/ function() {
    function Logger(identifier) {
        _class_call_check(this, Logger);
        _define_property$2(this, "enable", false);
        _define_property$2(this, "identifier", void 0);
        this.identifier = identifier || DEBUG_LOG;
        if (isBrowserEnv() && safeGetLocalStorageItem()) {
            this.enable = true;
        } else if (isDebugMode()) {
            this.enable = true;
        }
    }
    _create_class(Logger, [
        {
            key: "info",
            value: function info(msg, info) {
                if (this.enable) {
                    var argsToString = safeToString(info) || '';
                    if (isBrowserEnv()) {
                        console.info("%c ".concat(this.identifier, ": ").concat(msg, " ").concat(argsToString), 'color:#3300CC');
                    } else {
                        console.info('\x1b[34m%s', "".concat(this.identifier, ": ").concat(msg, " ").concat(argsToString ? "\n".concat(argsToString) : ''));
                    }
                }
            }
        },
        {
            key: "logOriginalInfo",
            value: function logOriginalInfo() {
                for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                    args[_key] = arguments[_key];
                }
                if (this.enable) {
                    if (isBrowserEnv()) {
                        var _console;
                        console.info("%c ".concat(this.identifier, ": OriginalInfo"), 'color:#3300CC');
                        (_console = console).log.apply(_console, _to_consumable_array(args));
                    } else {
                        var _console1;
                        console.info("%c ".concat(this.identifier, ": OriginalInfo"), 'color:#3300CC');
                        (_console1 = console).log.apply(_console1, _to_consumable_array(args));
                    }
                }
            }
        }
    ]);
    return Logger;
}();

function _array_like_to_array$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes$1(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _iterable_to_array_limit$1(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest$1() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array$1(arr, i) {
    return _array_with_holes$1(arr) || _iterable_to_array_limit$1(arr, i) || _unsupported_iterable_to_array$1(arr, i) || _non_iterable_rest$1();
}
function _to_array(arr) {
    return _array_with_holes$1(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array$1(arr) || _non_iterable_rest$1();
}
function _unsupported_iterable_to_array$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array$1(o, minLen);
}
var LOG_CATEGORY = '[ Federation Runtime ]';
// entry: name:version   version : 1.0.0 | ^1.2.3
// entry: name:entry  entry:  https://localhost:9000/federation-manifest.json
var parseEntry = function(str, devVerOrUrl) {
    var separator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : SEPARATOR;
    var strSplit = str.split(separator);
    var devVersionOrUrl = getProcessEnv()['NODE_ENV'] === 'development' && devVerOrUrl;
    var defaultVersion = '*';
    var isEntry = function(s) {
        return s.startsWith('http') || s.includes(MANIFEST_EXT);
    };
    // Check if the string starts with a type
    if (strSplit.length >= 2) {
        var _strSplit = _to_array(strSplit), name = _strSplit[0], versionOrEntryArr = _strSplit.slice(1);
        var versionOrEntry = devVersionOrUrl || versionOrEntryArr.join(separator);
        if (isEntry(versionOrEntry)) {
            return {
                name: name,
                entry: versionOrEntry
            };
        } else {
            // Apply version rule
            // devVersionOrUrl => inputVersion => defaultVersion
            return {
                name: name,
                version: versionOrEntry || defaultVersion
            };
        }
    } else if (strSplit.length === 1) {
        var _strSplit1 = _sliced_to_array$1(strSplit, 1), name1 = _strSplit1[0];
        if (devVersionOrUrl && isEntry(devVersionOrUrl)) {
            return {
                name: name1,
                entry: devVersionOrUrl
            };
        }
        return {
            name: name1,
            version: devVersionOrUrl || defaultVersion
        };
    } else {
        throw "Invalid entry value: ".concat(str);
    }
};
var logger = new Logger();
var composeKeyWithSeparator =  function composeKeyWithSeparator() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    if (!args.length) {
        return '';
    }
    return args.reduce(function(sum, cur) {
        if (!cur) {
            return sum;
        }
        if (!sum) {
            return cur;
        }
        return "".concat(sum).concat(SEPARATOR).concat(cur);
    }, '');
};
var encodeName =  function encodeName(name) {
    var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : '', withExt = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    try {
        var ext = withExt ? '.js' : '';
        return "".concat(prefix).concat(name.replace(new RegExp("".concat(NameTransformSymbol.AT), 'g'), NameTransformMap[NameTransformSymbol.AT]).replace(new RegExp("".concat(NameTransformSymbol.HYPHEN), 'g'), NameTransformMap[NameTransformSymbol.HYPHEN]).replace(new RegExp("".concat(NameTransformSymbol.SLASH), 'g'), NameTransformMap[NameTransformSymbol.SLASH])).concat(ext);
    } catch (err) {
        throw err;
    }
};
var decodeName =  function decodeName(name, prefix, withExt) {
    try {
        var decodedName = name;
        if (prefix) {
            if (!decodedName.startsWith(prefix)) {
                return decodedName;
            }
            decodedName = decodedName.replace(new RegExp(prefix, 'g'), '');
        }
        decodedName = decodedName.replace(new RegExp("".concat(NameTransformMap[NameTransformSymbol.AT]), 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp("".concat(NameTransformMap[NameTransformSymbol.SLASH]), 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp("".concat(NameTransformMap[NameTransformSymbol.HYPHEN]), 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]);
        if (withExt) {
            decodedName = decodedName.replace('.js', '');
        }
        return decodedName;
    } catch (err) {
        throw err;
    }
};
var generateExposeFilename =  function(exposeName, withExt) {
    if (!exposeName) {
        return '';
    }
    var expose = exposeName;
    if (expose === '.') {
        expose = 'default_export';
    }
    if (expose.startsWith('./')) {
        expose = expose.replace('./', '');
    }
    return encodeName(expose, '__federation_expose_', withExt);
};
var generateShareFilename =  function(pkgName, withExt) {
    if (!pkgName) {
        return '';
    }
    return encodeName(pkgName, '__federation_shared_', withExt);
};
var getResourceUrl = function(module, sourceUrl) {
    if ('getPublicPath' in module) {
        var publicPath = new Function(module.getPublicPath)();
        return "".concat(publicPath).concat(sourceUrl);
    } else if ('publicPath' in module) {
        return "".concat(module.publicPath).concat(sourceUrl);
    } else {
        console.warn('Can not get resource url, if in debug mode, please ignore', module, sourceUrl);
        return '';
    }
};
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
var assert = function(condition, msg) {
    if (!condition) {
        error(msg);
    }
};
var error = function(msg) {
    throw new Error("".concat(LOG_CATEGORY, ": ").concat(msg));
};
var warn = function(msg) {
    console.warn("".concat(LOG_CATEGORY, ": ").concat(msg));
};

function _define_property$1(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread$1(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property$1(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
var simpleJoinRemoteEntry = function(rPath, rName) {
    if (!rPath) {
        return rName;
    }
    var transformPath = function(str) {
        if (str === '.') {
            return '';
        }
        if (str.startsWith('./')) {
            return str.replace('./', '');
        }
        if (str.startsWith('/')) {
            var strWithoutSlash = str.slice(1);
            if (strWithoutSlash.endsWith('/')) {
                return strWithoutSlash.slice(0, -1);
            }
            return strWithoutSlash;
        }
        return str;
    };
    var transformedPath = transformPath(rPath);
    if (!transformedPath) {
        return rName;
    }
    if (transformedPath.endsWith('/')) {
        return "".concat(transformedPath).concat(rName);
    }
    return "".concat(transformedPath, "/").concat(rName);
};
function inferAutoPublicPath(url) {
    return url.replace(/#.*$/, '').replace(/\?.*$/, '').replace(/\/[^\/]+$/, '/');
}
// Priority: overrides > remotes
// eslint-disable-next-line max-lines-per-function
function generateSnapshotFromManifest(manifest) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var _manifest_metaData, _manifest_metaData1;
    var _options_remotes = options.remotes, remotes = _options_remotes === void 0 ? {} : _options_remotes, _options_overrides = options.overrides, overrides = _options_overrides === void 0 ? {} : _options_overrides, version = options.version;
    var remoteSnapshot;
    var getPublicPath = function() {
        if ('publicPath' in manifest.metaData) {
            if (manifest.metaData.publicPath === 'auto' && version) {
                // use same implementation as publicPath auto runtime module implements
                return inferAutoPublicPath(version);
            }
            return manifest.metaData.publicPath;
        } else {
            return manifest.metaData.getPublicPath;
        }
    };
    var overridesKeys = Object.keys(overrides);
    var remotesInfo = {};
    // If remotes are not provided, only the remotes in the manifest will be read
    if (!Object.keys(remotes).length) {
        var _manifest_remotes;
        remotesInfo = ((_manifest_remotes = manifest.remotes) === null || _manifest_remotes === void 0 ? void 0 : _manifest_remotes.reduce(function(res, next) {
            var matchedVersion;
            var name = next.federationContainerName;
            // overrides have higher priority
            if (overridesKeys.includes(name)) {
                matchedVersion = overrides[name];
            } else {
                if ('version' in next) {
                    matchedVersion = next.version;
                } else {
                    matchedVersion = next.entry;
                }
            }
            res[name] = {
                matchedVersion: matchedVersion
            };
            return res;
        }, {})) || {};
    }
    // If remotes (deploy scenario) are specified, they need to be traversed again
    Object.keys(remotes).forEach(function(key) {
        return remotesInfo[key] = {
            // overrides will override dependencies
            matchedVersion: overridesKeys.includes(key) ? overrides[key] : remotes[key]
        };
    });
    var _manifest_metaData2 = manifest.metaData, _manifest_metaData_remoteEntry = _manifest_metaData2.remoteEntry, remoteEntryPath = _manifest_metaData_remoteEntry.path, remoteEntryName = _manifest_metaData_remoteEntry.name, remoteEntryType = _manifest_metaData_remoteEntry.type, remoteTypes = _manifest_metaData2.types, buildVersion = _manifest_metaData2.buildInfo.buildVersion, globalName = _manifest_metaData2.globalName;
    var exposes = manifest.exposes;
    var basicRemoteSnapshot = {
        version: version ? version : '',
        buildVersion: buildVersion,
        globalName: globalName,
        remoteEntry: simpleJoinRemoteEntry(remoteEntryPath, remoteEntryName),
        remoteEntryType: remoteEntryType,
        remoteTypes: simpleJoinRemoteEntry(remoteTypes.path, remoteTypes.name),
        remoteTypesZip: remoteTypes.zip || '',
        remoteTypesAPI: remoteTypes.api || '',
        remotesInfo: remotesInfo,
        shared: manifest === null || manifest === void 0 ? void 0 : manifest.shared.map(function(item) {
            return {
                assets: item.assets,
                sharedName: item.name,
                version: item.version
            };
        }),
        modules: exposes === null || exposes === void 0 ? void 0 : exposes.map(function(expose) {
            return {
                moduleName: expose.name,
                modulePath: expose.path,
                assets: expose.assets
            };
        })
    };
    if ((_manifest_metaData = manifest.metaData) === null || _manifest_metaData === void 0 ? void 0 : _manifest_metaData.prefetchInterface) {
        var prefetchInterface = manifest.metaData.prefetchInterface;
        basicRemoteSnapshot = _object_spread_props(_object_spread$1({}, basicRemoteSnapshot), {
            prefetchInterface: prefetchInterface
        });
    }
    if ((_manifest_metaData1 = manifest.metaData) === null || _manifest_metaData1 === void 0 ? void 0 : _manifest_metaData1.prefetchEntry) {
        var _manifest_metaData_prefetchEntry = manifest.metaData.prefetchEntry, path = _manifest_metaData_prefetchEntry.path, name = _manifest_metaData_prefetchEntry.name, type = _manifest_metaData_prefetchEntry.type;
        basicRemoteSnapshot = _object_spread_props(_object_spread$1({}, basicRemoteSnapshot), {
            prefetchEntry: simpleJoinRemoteEntry(path, name),
            prefetchEntryType: type
        });
    }
    if ('publicPath' in manifest.metaData) {
        remoteSnapshot = _object_spread_props(_object_spread$1({}, basicRemoteSnapshot), {
            publicPath: getPublicPath()
        });
    } else {
        remoteSnapshot = _object_spread_props(_object_spread$1({}, basicRemoteSnapshot), {
            getPublicPath: getPublicPath()
        });
    }
    return remoteSnapshot;
}
function isManifestProvider(moduleInfo) {
    if ('remoteEntry' in moduleInfo && moduleInfo.remoteEntry.includes(MANIFEST_EXT)) {
        return true;
    } else {
        return false;
    }
}

function asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator$1(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
        return !!right[Symbol.hasInstance](left);
    } else {
        return left instanceof right;
    }
}
function _ts_generator$1(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function safeWrapper(callback, disableWarn) {
    return _safeWrapper.apply(this, arguments);
}
function _safeWrapper() {
    _safeWrapper = _async_to_generator$1(function(callback, disableWarn) {
        var res, e;
        return _ts_generator$1(this, function(_state) {
            switch(_state.label){
                case 0:
                    _state.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4,
                        callback()
                    ];
                case 1:
                    res = _state.sent();
                    return [
                        2,
                        res
                    ];
                case 2:
                    e = _state.sent();
                    !disableWarn && warn(e);
                    return [
                        2
                    ];
                case 3:
                    return [
                        2
                    ];
            }
        });
    });
    return _safeWrapper.apply(this, arguments);
}
function isStaticResourcesEqual(url1, url2) {
    var REG_EXP = /^(https?:)?\/\//i;
    // Transform url1 and url2 into relative paths
    var relativeUrl1 = url1.replace(REG_EXP, '').replace(/\/$/, '');
    var relativeUrl2 = url2.replace(REG_EXP, '').replace(/\/$/, '');
    // Check if the relative paths are identical
    return relativeUrl1 === relativeUrl2;
}
function createScript(url, cb, attrs, createScriptHook) {
    // Retrieve the existing script element by its src attribute
    var script = null;
    var needAttach = true;
    var timeout = 20000;
    var timeoutId;
    var scripts = document.getElementsByTagName('script');
    for(var i = 0; i < scripts.length; i++){
        var s = scripts[i];
        var scriptSrc = s.getAttribute('src');
        if (scriptSrc && isStaticResourcesEqual(scriptSrc, url)) {
            script = s;
            needAttach = false;
            break;
        }
    }
    if (!script) {
        script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        if (createScriptHook) {
            var createScriptRes = createScriptHook(url);
            if (_instanceof(createScriptRes, HTMLScriptElement)) {
                script = createScriptRes;
            } else if (typeof createScriptRes === 'object') {
                if (createScriptRes.script) script = createScriptRes.script;
                if (createScriptRes.timeout) timeout = createScriptRes.timeout;
            }
        }
    }
    if (attrs) {
        Object.keys(attrs).forEach(function(name) {
            if (script) {
                if (name === 'async' || name === 'defer') {
                    script[name] = attrs[name];
                } else {
                    script.setAttribute(name, attrs[name]);
                }
            }
        });
    }
    var onScriptComplete = function(prev, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    event) {
        clearTimeout(timeoutId);
        // Prevent memory leaks in IE.
        if (script) {
            script.onerror = null;
            script.onload = null;
            safeWrapper(function() {
                (script === null || script === void 0 ? void 0 : script.parentNode) && script.parentNode.removeChild(script);
            });
            if (prev) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var res = prev(event);
                cb();
                return res;
            }
        }
        cb();
    };
    script.onerror = onScriptComplete.bind(null, script.onerror);
    script.onload = onScriptComplete.bind(null, script.onload);
    timeoutId = setTimeout(function() {
        onScriptComplete(null, new Error('Remote script "'.concat(url, '" time-outed.')));
    }, timeout);
    return {
        script: script,
        needAttach: needAttach
    };
}
function createLink(url, cb) {
    var attrs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, createLinkHook = arguments.length > 3 ? arguments[3] : void 0;
    // <link rel="preload" href="script.js" as="script">
    // Retrieve the existing script element by its src attribute
    var link = null;
    var needAttach = true;
    var links = document.getElementsByTagName('link');
    for(var i = 0; i < links.length; i++){
        var l = links[i];
        var linkHref = l.getAttribute('href');
        var linkRef = l.getAttribute('ref');
        if (linkHref && isStaticResourcesEqual(linkHref, url) && linkRef === attrs['ref']) {
            link = l;
            needAttach = false;
            break;
        }
    }
    if (!link) {
        link = document.createElement('link');
        link.setAttribute('href', url);
        if (createLinkHook) {
            var createLinkRes = createLinkHook(url);
            if (_instanceof(createLinkRes, HTMLLinkElement)) {
                link = createLinkRes;
            }
        }
    }
    if (attrs) {
        Object.keys(attrs).forEach(function(name) {
            if (link) {
                link.setAttribute(name, attrs[name]);
            }
        });
    }
    var onLinkComplete = function(prev, // eslint-disable-next-line @typescript-eslint/no-explicit-any
    event) {
        // Prevent memory leaks in IE.
        if (link) {
            link.onerror = null;
            link.onload = null;
            safeWrapper(function() {
                (link === null || link === void 0 ? void 0 : link.parentNode) && link.parentNode.removeChild(link);
            });
            if (prev) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var res = prev(event);
                cb();
                return res;
            }
        }
        cb();
    };
    link.onerror = onLinkComplete.bind(null, link.onerror);
    link.onload = onLinkComplete.bind(null, link.onload);
    return {
        link: link,
        needAttach: needAttach
    };
}
function loadScript(url, info) {
    var attrs = info.attrs, createScriptHook = info.createScriptHook;
    return new Promise(function(resolve, _reject) {
        var _createScript = createScript(url, resolve, attrs, createScriptHook), script = _createScript.script, needAttach = _createScript.needAttach;
        needAttach && document.getElementsByTagName('head')[0].appendChild(script);
    });
}

function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_with_holes(arr) {
    if (Array.isArray(arr)) return arr;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _iterable_to_array_limit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _non_iterable_rest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _sliced_to_array(arr, i) {
    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function importNodeModule(name) {
    if (!name) {
        throw new Error('import specifier is required');
    }
    var importModule = new Function('name', "return import(name)");
    return importModule(name).then(function(res) {
        return res.default;
    }).catch(function(error) {
        console.error("Error importing module ".concat(name, ":"), error);
        throw error;
    });
}
function createScriptNode(url, cb, attrs, createScriptHook) {
    if (createScriptHook) {
        var hookResult = createScriptHook(url);
        if (hookResult && typeof hookResult === 'object' && 'url' in hookResult) {
            url = hookResult.url;
        }
    }
    var urlObj;
    try {
        urlObj = new URL(url);
    } catch (e) {
        console.error('Error constructing URL:', e);
        cb(new Error("Invalid URL: ".concat(e)));
        return;
    }
    var getFetch = function() {
        var _ref = _async_to_generator(function() {
            var fetchModule;
            return _ts_generator(this, function(_state) {
                switch(_state.label){
                    case 0:
                        if (!(typeof fetch === 'undefined')) return [
                            3,
                            2
                        ];
                        return [
                            4,
                            importNodeModule('node-fetch')
                        ];
                    case 1:
                        fetchModule = _state.sent();
                        //@ts-ignore
                        return [
                            2,
                            (fetchModule === null || fetchModule === void 0 ? void 0 : fetchModule.default) || fetchModule
                        ];
                    case 2:
                        return [
                            2,
                            fetch
                        ];
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
        return function getFetch() {
            return _ref.apply(this, arguments);
        };
    }();
    console.log('fetching', urlObj.href);
    getFetch().then(function(f) {
        f(urlObj.href).then(function(res) {
            return res.text();
        }).then(function() {
            var _ref = _async_to_generator(function(data) {
                var _ref, path, vm, scriptContext, urlDirname, filename, script, exportedInterface, container;
                return _ts_generator(this, function(_state) {
                    switch(_state.label){
                        case 0:
                            return [
                                4,
                                Promise.all([
                                    importNodeModule('path'),
                                    importNodeModule('vm')
                                ])
                            ];
                        case 1:
                            _ref = _sliced_to_array.apply(void 0, [
                                _state.sent(),
                                2
                            ]), path = _ref[0], vm = _ref[1];
                            scriptContext = {
                                exports: {},
                                module: {
                                    exports: {}
                                }
                            };
                            urlDirname = urlObj.pathname.split('/').slice(0, -1).join('/');
                            filename = path.basename(urlObj.pathname);
                            try {
                                script = new vm.Script("(function(exports, module, require, __dirname, __filename) {".concat(data, "\n})"), filename);
                                script.runInThisContext()(scriptContext.exports, scriptContext.module, eval('require'), urlDirname, filename);
                                exportedInterface = scriptContext.module.exports || scriptContext.exports;
                                if (attrs && exportedInterface && attrs['globalName']) {
                                    container = exportedInterface[attrs['globalName']] || exportedInterface;
                                    cb(undefined, container);
                                    return [
                                        2
                                    ];
                                }
                                cb(undefined, exportedInterface);
                            } catch (e) {
                                // console.error('Error running script:', e);
                                cb(new Error("Script execution error: ".concat(e)));
                            }
                            return [
                                2
                            ];
                    }
                });
            });
            return function(data) {
                return _ref.apply(this, arguments);
            };
        }()).catch(function(err) {
            // console.error('Error fetching script:', err);
            cb(err);
        });
    });
}
function loadScriptNode(url, info) {
    return new Promise(function(resolve, reject) {
        createScriptNode(url, function(error, scriptContext) {
            if (error) {
                reject(error);
            } else {
                var _info_attrs, _info_attrs1;
                var remoteEntryKey = (info === null || info === void 0 ? void 0 : (_info_attrs = info.attrs) === null || _info_attrs === void 0 ? void 0 : _info_attrs['globalName']) || "__FEDERATION_".concat(info === null || info === void 0 ? void 0 : (_info_attrs1 = info.attrs) === null || _info_attrs1 === void 0 ? void 0 : _info_attrs1['name'], ":custom__");
                var entryExports = globalThis[remoteEntryKey] = scriptContext;
                resolve(entryExports);
            }
        }, info.attrs, info.createScriptHook);
    });
}

function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _type_of(obj) {
    "@swc/helpers - typeof";
    return obj && typeof Symbol !== "undefined" && obj.constructor === Symbol ? "symbol" : typeof obj;
}
function normalizeOptions(enableDefault, defaultOptions, key) {
    return function(options) {
        if (options === false) {
            return false;
        }
        if (typeof options === 'undefined') {
            if (enableDefault) {
                return defaultOptions;
            } else {
                return false;
            }
        }
        if (options === true) {
            return defaultOptions;
        }
        if (options && typeof options === 'object') {
            return _object_spread({}, defaultOptions, options);
        }
        throw new Error("Unexpected type for `".concat(key, "`, expect boolean/undefined/object, got: ").concat(typeof options === "undefined" ? "undefined" : _type_of(options)));
    };
}

exports.BROWSER_LOG_KEY = BROWSER_LOG_KEY;
exports.BROWSER_LOG_VALUE = BROWSER_LOG_VALUE;
exports.EncodedNameTransformMap = EncodedNameTransformMap;
exports.FederationModuleManifest = FederationModuleManifest;
exports.Logger = Logger;
exports.MANIFEST_EXT = MANIFEST_EXT;
exports.MFModuleType = MFModuleType;
exports.MODULE_DEVTOOL_IDENTIFIER = MODULE_DEVTOOL_IDENTIFIER;
exports.ManifestFileName = ManifestFileName;
exports.NameTransformMap = NameTransformMap;
exports.NameTransformSymbol = NameTransformSymbol;
exports.SEPARATOR = SEPARATOR;
exports.StatsFileName = StatsFileName;
exports.assert = assert;
exports.composeKeyWithSeparator = composeKeyWithSeparator;
exports.containerPlugin = ContainerPlugin;
exports.containerReferencePlugin = ContainerReferencePlugin;
exports.createLink = createLink;
exports.createScript = createScript;
exports.createScriptNode = createScriptNode;
exports.decodeName = decodeName;
exports.encodeName = encodeName;
exports.error = error;
exports.generateExposeFilename = generateExposeFilename;
exports.generateShareFilename = generateShareFilename;
exports.generateSnapshotFromManifest = generateSnapshotFromManifest;
exports.getProcessEnv = getProcessEnv;
exports.getResourceUrl = getResourceUrl;
exports.inferAutoPublicPath = inferAutoPublicPath;
exports.isBrowserEnv = isBrowserEnv;
exports.isDebugMode = isDebugMode;
exports.isManifestProvider = isManifestProvider;
exports.isStaticResourcesEqual = isStaticResourcesEqual;
exports.loadScript = loadScript;
exports.loadScriptNode = loadScriptNode;
exports.logger = logger;
exports.moduleFederationPlugin = ModuleFederationPlugin;
exports.normalizeOptions = normalizeOptions;
exports.parseEntry = parseEntry;
exports.safeWrapper = safeWrapper;
exports.sharePlugin = SharePlugin;
exports.simpleJoinRemoteEntry = simpleJoinRemoteEntry;
exports.warn = warn;
