declare const _default: {
    definitions: {
        AmdContainer: {
            description: string;
            type: string;
            minLength: number;
        };
        AuxiliaryComment: {
            description: string;
            anyOf: ({
                description: string;
                type: string;
                $ref?: undefined;
            } | {
                $ref: string;
                description?: undefined;
                type?: undefined;
            })[];
        };
        EntryRuntime: {
            description: string;
            anyOf: ({
                enum: boolean[];
                type?: undefined;
                minLength?: undefined;
            } | {
                type: string;
                minLength: number;
                enum?: undefined;
            })[];
        };
        Exposes: {
            description: string;
            anyOf: ({
                type: string;
                items: {
                    description: string;
                    anyOf: {
                        $ref: string;
                    }[];
                };
                $ref?: undefined;
            } | {
                $ref: string;
                type?: undefined;
                items?: undefined;
            })[];
        };
        ExposesConfig: {
            description: string;
            type: string;
            additionalProperties: boolean;
            properties: {
                import: {
                    description: string;
                    anyOf: {
                        $ref: string;
                    }[];
                };
                name: {
                    description: string;
                    type: string;
                };
            };
            required: string[];
        };
        ExposesItem: {
            description: string;
            type: string;
            minLength: number;
        };
        ExposesItems: {
            description: string;
            type: string;
            items: {
                $ref: string;
            };
        };
        ExposesObject: {
            description: string;
            type: string;
            additionalProperties: {
                description: string;
                anyOf: {
                    $ref: string;
                }[];
            };
        };
        ExternalsType: {
            description: string;
            enum: string[];
        };
        LibraryCustomUmdCommentObject: {
            description: string;
            type: string;
            additionalProperties: boolean;
            properties: {
                amd: {
                    description: string;
                    type: string;
                };
                commonjs: {
                    description: string;
                    type: string;
                };
                commonjs2: {
                    description: string;
                    type: string;
                };
                root: {
                    description: string;
                    type: string;
                };
            };
        };
        LibraryCustomUmdObject: {
            description: string;
            type: string;
            additionalProperties: boolean;
            properties: {
                amd: {
                    description: string;
                    type: string;
                    minLength: number;
                };
                commonjs: {
                    description: string;
                    type: string;
                    minLength: number;
                };
                root: {
                    description: string;
                    anyOf: ({
                        type: string;
                        items: {
                            description: string;
                            type: string;
                            minLength: number;
                        };
                        minLength?: undefined;
                    } | {
                        type: string;
                        minLength: number;
                        items?: undefined;
                    })[];
                };
            };
        };
        LibraryExport: {
            description: string;
            anyOf: ({
                type: string;
                items: {
                    description: string;
                    type: string;
                    minLength: number;
                };
                minLength?: undefined;
            } | {
                type: string;
                minLength: number;
                items?: undefined;
            })[];
        };
        LibraryName: {
            description: string;
            anyOf: ({
                type: string;
                items: {
                    description: string;
                    type: string;
                    minLength: number;
                };
                minItems: number;
                minLength?: undefined;
                $ref?: undefined;
            } | {
                type: string;
                minLength: number;
                items?: undefined;
                minItems?: undefined;
                $ref?: undefined;
            } | {
                $ref: string;
                type?: undefined;
                items?: undefined;
                minItems?: undefined;
                minLength?: undefined;
            })[];
        };
        LibraryOptions: {
            description: string;
            type: string;
            additionalProperties: boolean;
            properties: {
                amdContainer: {
                    $ref: string;
                };
                auxiliaryComment: {
                    $ref: string;
                };
                export: {
                    $ref: string;
                };
                name: {
                    $ref: string;
                };
                type: {
                    $ref: string;
                };
                umdNamedDefine: {
                    $ref: string;
                };
            };
            required: string[];
        };
        LibraryType: {
            description: string;
            anyOf: ({
                enum: string[];
                type?: undefined;
            } | {
                type: string;
                enum?: undefined;
            })[];
        };
        Remotes: {
            description: string;
            anyOf: ({
                type: string;
                items: {
                    description: string;
                    anyOf: {
                        $ref: string;
                    }[];
                };
                $ref?: undefined;
            } | {
                $ref: string;
                type?: undefined;
                items?: undefined;
            })[];
        };
        RemotesConfig: {
            description: string;
            type: string;
            additionalProperties: boolean;
            properties: {
                external: {
                    description: string;
                    anyOf: {
                        $ref: string;
                    }[];
                };
                shareScope: {
                    description: string;
                    type: string;
                    minLength: number;
                };
            };
            required: string[];
        };
        RemotesItem: {
            description: string;
            type: string;
            minLength: number;
        };
        RemotesItems: {
            description: string;
            type: string;
            items: {
                $ref: string;
            };
        };
        RemotesObject: {
            description: string;
            type: string;
            additionalProperties: {
                description: string;
                anyOf: {
                    $ref: string;
                }[];
            };
        };
        Shared: {
            description: string;
            anyOf: ({
                type: string;
                items: {
                    description: string;
                    anyOf: {
                        $ref: string;
                    }[];
                };
                $ref?: undefined;
            } | {
                $ref: string;
                type?: undefined;
                items?: undefined;
            })[];
        };
        SharedConfig: {
            description: string;
            type: string;
            additionalProperties: boolean;
            properties: {
                eager: {
                    description: string;
                    type: string;
                };
                import: {
                    description: string;
                    anyOf: ({
                        description: string;
                        enum: boolean[];
                        $ref?: undefined;
                    } | {
                        $ref: string;
                        description?: undefined;
                        enum?: undefined;
                    })[];
                };
                packageName: {
                    description: string;
                    type: string;
                    minLength: number;
                };
                requiredVersion: {
                    description: string;
                    anyOf: ({
                        description: string;
                        enum: boolean[];
                        type?: undefined;
                    } | {
                        description: string;
                        type: string;
                        enum?: undefined;
                    })[];
                };
                shareKey: {
                    description: string;
                    type: string;
                    minLength: number;
                };
                shareScope: {
                    description: string;
                    type: string;
                    minLength: number;
                };
                singleton: {
                    description: string;
                    type: string;
                };
                strictVersion: {
                    description: string;
                    type: string;
                };
                version: {
                    description: string;
                    anyOf: ({
                        description: string;
                        enum: boolean[];
                        type?: undefined;
                    } | {
                        description: string;
                        type: string;
                        enum?: undefined;
                    })[];
                };
            };
        };
        SharedItem: {
            description: string;
            type: string;
            minLength: number;
        };
        SharedObject: {
            description: string;
            type: string;
            additionalProperties: {
                description: string;
                anyOf: {
                    $ref: string;
                }[];
            };
        };
        UmdNamedDefine: {
            description: string;
            type: string;
        };
        Manifest: {
            description: string;
            type: string;
            properties: {
                filePath: {
                    description: string;
                    type: string;
                };
                disableAssetsAnalyze: {
                    description: string;
                    type: string;
                };
            };
        };
        DtsRemoteOptions: {
            description: string;
            type: string;
            properties: {
                tsConfigPath: {
                    description: string;
                    type: string;
                };
                typesFolder: {
                    description: string;
                    type: string;
                };
                compiledTypesFolder: {
                    description: string;
                    type: string;
                };
                deleteTypesFolder: {
                    description: string;
                    type: string;
                };
                additionalFilesToCompile: {
                    description: string;
                    type: string;
                    items: {
                        type: string;
                    };
                };
                compileInChildProcess: {
                    description: string;
                    type: string;
                };
                compilerInstance: {
                    description: string;
                    enum: string[];
                };
                generateAPITypes: {
                    description: string;
                    type: string;
                };
                abortOnError: {
                    description: string;
                    type: string;
                };
            };
        };
        DtsHostOptions: {
            description: string;
            type: string;
            properties: {
                typesFolder: {
                    description: string;
                    type: string;
                };
                remoteTypesFolder: {
                    description: string;
                    type: string;
                };
                deleteTypesFolder: {
                    description: string;
                    type: string;
                };
                abortOnError: {
                    description: string;
                    type: string;
                };
                maxRetries: {
                    description: string;
                    type: string;
                    minimum: number;
                };
            };
        };
        Dts: {
            description: string;
            type: string;
            properties: {
                generateTypes: {
                    description: string;
                    ref: string;
                };
                consumeTypes: {
                    description: string;
                    ref: string;
                };
                extraOptions: {
                    description: string;
                    type: string;
                    additionalProperties: boolean;
                };
                tsConfigPath: {
                    description: string;
                    type: string;
                };
                implementation: {
                    description: string;
                    type: string;
                    minLength: number;
                };
            };
            additionalProperties: boolean;
        };
        Dev: {
            description: string;
            type: string;
            properties: {
                disableLiveReload: {
                    description: string;
                    type: string;
                };
                disableHotTypesReload: {
                    description: string;
                    type: string;
                };
            };
        };
    };
    title: string;
    type: string;
    additionalProperties: boolean;
    properties: {
        exposes: {
            $ref: string;
        };
        filename: {
            description: string;
            type: string;
            absolutePath: boolean;
        };
        implementation: {
            description: string;
            type: string;
            minLength: number;
        };
        library: {
            $ref: string;
        };
        name: {
            description: string;
            type: string;
        };
        remoteType: {
            description: string;
            oneOf: {
                $ref: string;
            }[];
        };
        remotes: {
            $ref: string;
        };
        runtime: {
            $ref: string;
        };
        runtimePlugins: {
            type: string;
            items: {
                anyOf: ({
                    type: string;
                    minLength: number;
                    description: string;
                    required?: undefined;
                    properties?: undefined;
                    additionalProperties?: undefined;
                } | {
                    type: string;
                    required: string[];
                    properties: {
                        import: {
                            type: string;
                            minLength: number;
                            description: string;
                        };
                        async: {
                            type: string;
                        };
                    };
                    additionalProperties: boolean;
                    minLength?: undefined;
                    description?: undefined;
                })[];
            };
        };
        manifest: {
            description: string;
            anyOf: ({
                $ref: string;
                type?: undefined;
            } | {
                type: string;
                $ref?: undefined;
            })[];
        };
        shareScope: {
            description: string;
            type: string;
            minLength: number;
        };
        shared: {
            $ref: string;
        };
        dts: {
            description: string;
            anyOf: ({
                $ref: string;
                type?: undefined;
            } | {
                type: string;
                $ref?: undefined;
            })[];
        };
        dev: {
            description: string;
            anyOf: ({
                $ref: string;
                type?: undefined;
            } | {
                type: string;
                $ref?: undefined;
            })[];
        };
    };
};
export default _default;
